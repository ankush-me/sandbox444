"""autogenerated by genpy from filter_cloud_color/CornersRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CornersRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "filter_cloud_color/CornersRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CornersRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from filter_cloud_color/CornersResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import filter_cloud_color.msg
import geometry_msgs.msg

class CornersResponse(genpy.Message):
  _md5sum = "39b243192c4e1011b2a0afc7b6daa13d"
  _type = "filter_cloud_color/CornersResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """filter_cloud_color/ImageCorner[4] imageCorners
geometry_msgs/Point[4] pcCorners
geometry_msgs/Point[4] boxCorners


================================================================================
MSG: filter_cloud_color/ImageCorner
int16 row
int16 col
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['imageCorners','pcCorners','boxCorners']
  _slot_types = ['filter_cloud_color/ImageCorner[4]','geometry_msgs/Point[4]','geometry_msgs/Point[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       imageCorners,pcCorners,boxCorners

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CornersResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.imageCorners is None:
        self.imageCorners = [filter_cloud_color.msg.ImageCorner(),filter_cloud_color.msg.ImageCorner(),filter_cloud_color.msg.ImageCorner(),filter_cloud_color.msg.ImageCorner()]
      if self.pcCorners is None:
        self.pcCorners = [geometry_msgs.msg.Point(),geometry_msgs.msg.Point(),geometry_msgs.msg.Point(),geometry_msgs.msg.Point()]
      if self.boxCorners is None:
        self.boxCorners = [geometry_msgs.msg.Point(),geometry_msgs.msg.Point(),geometry_msgs.msg.Point(),geometry_msgs.msg.Point()]
    else:
      self.imageCorners = [filter_cloud_color.msg.ImageCorner(),filter_cloud_color.msg.ImageCorner(),filter_cloud_color.msg.ImageCorner(),filter_cloud_color.msg.ImageCorner()]
      self.pcCorners = [geometry_msgs.msg.Point(),geometry_msgs.msg.Point(),geometry_msgs.msg.Point(),geometry_msgs.msg.Point()]
      self.boxCorners = [geometry_msgs.msg.Point(),geometry_msgs.msg.Point(),geometry_msgs.msg.Point(),geometry_msgs.msg.Point()]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      for val1 in self.imageCorners:
        _x = val1
        buff.write(_struct_2h.pack(_x.row, _x.col))
      for val1 in self.pcCorners:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      for val1 in self.boxCorners:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.imageCorners is None:
        self.imageCorners = None
      if self.pcCorners is None:
        self.pcCorners = None
      if self.boxCorners is None:
        self.boxCorners = None
      end = 0
      self.imageCorners = []
      for i in range(0, 4):
        val1 = filter_cloud_color.msg.ImageCorner()
        _x = val1
        start = end
        end += 4
        (_x.row, _x.col,) = _struct_2h.unpack(str[start:end])
        self.imageCorners.append(val1)
      self.pcCorners = []
      for i in range(0, 4):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.pcCorners.append(val1)
      self.boxCorners = []
      for i in range(0, 4):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.boxCorners.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      for val1 in self.imageCorners:
        _x = val1
        buff.write(_struct_2h.pack(_x.row, _x.col))
      for val1 in self.pcCorners:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      for val1 in self.boxCorners:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.imageCorners is None:
        self.imageCorners = None
      if self.pcCorners is None:
        self.pcCorners = None
      if self.boxCorners is None:
        self.boxCorners = None
      end = 0
      self.imageCorners = []
      for i in range(0, 4):
        val1 = filter_cloud_color.msg.ImageCorner()
        _x = val1
        start = end
        end += 4
        (_x.row, _x.col,) = _struct_2h.unpack(str[start:end])
        self.imageCorners.append(val1)
      self.pcCorners = []
      for i in range(0, 4):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.pcCorners.append(val1)
      self.boxCorners = []
      for i in range(0, 4):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.boxCorners.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2h = struct.Struct("<2h")
_struct_3d = struct.Struct("<3d")
class Corners(object):
  _type          = 'filter_cloud_color/Corners'
  _md5sum = '39b243192c4e1011b2a0afc7b6daa13d'
  _request_class  = CornersRequest
  _response_class = CornersResponse
