"""autogenerated by genpy from surgical_msgs/InitInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import surgical_msgs.msg
import geometry_msgs.msg

class InitInfo(genpy.Message):
  _md5sum = "5f46f01f7b022d4bff9f8cc7798e86c6"
  _type = "surgical_msgs/InitInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Defines CUTS and HOLES.

# Holes are a bunch of 3D points
geometry_msgs/Point[] holes

# An array of cut is cuts. A cut is an array of 3D points.
Cut[] cuts
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: surgical_msgs/Cut
# defines an array for 3D points.
geometry_msgs/Point[] nodes
"""
  __slots__ = ['holes','cuts']
  _slot_types = ['geometry_msgs/Point[]','surgical_msgs/Cut[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       holes,cuts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InitInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.holes is None:
        self.holes = []
      if self.cuts is None:
        self.cuts = []
    else:
      self.holes = []
      self.cuts = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.holes)
      buff.write(_struct_I.pack(length))
      for val1 in self.holes:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.cuts)
      buff.write(_struct_I.pack(length))
      for val1 in self.cuts:
        length = len(val1.nodes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.nodes:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.holes is None:
        self.holes = None
      if self.cuts is None:
        self.cuts = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.holes = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.holes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cuts = []
      for i in range(0, length):
        val1 = surgical_msgs.msg.Cut()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.nodes = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.nodes.append(val2)
        self.cuts.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.holes)
      buff.write(_struct_I.pack(length))
      for val1 in self.holes:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.cuts)
      buff.write(_struct_I.pack(length))
      for val1 in self.cuts:
        length = len(val1.nodes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.nodes:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.holes is None:
        self.holes = None
      if self.cuts is None:
        self.cuts = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.holes = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.holes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cuts = []
      for i in range(0, length):
        val1 = surgical_msgs.msg.Cut()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.nodes = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.nodes.append(val2)
        self.cuts.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
