/* Auto-generated by genmsg_cpp for file /home/sibi/sandbox/sandbox444/surgical_msgs/msg/Hole.msg */
#ifndef SURGICAL_MSGS_MESSAGE_HOLE_H
#define SURGICAL_MSGS_MESSAGE_HOLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"

namespace surgical_msgs
{
template <class ContainerAllocator>
struct Hole_ {
  typedef Hole_<ContainerAllocator> Type;

  Hole_()
  : pt()
  , x_idx(0)
  , y_idx(0)
  {
  }

  Hole_(const ContainerAllocator& _alloc)
  : pt(_alloc)
  , x_idx(0)
  , y_idx(0)
  {
  }

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pt_type;
   ::geometry_msgs::Point_<ContainerAllocator>  pt;

  typedef int32_t _x_idx_type;
  int32_t x_idx;

  typedef int32_t _y_idx_type;
  int32_t y_idx;


  typedef boost::shared_ptr< ::surgical_msgs::Hole_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::surgical_msgs::Hole_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Hole
typedef  ::surgical_msgs::Hole_<std::allocator<void> > Hole;

typedef boost::shared_ptr< ::surgical_msgs::Hole> HolePtr;
typedef boost::shared_ptr< ::surgical_msgs::Hole const> HoleConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::surgical_msgs::Hole_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::surgical_msgs::Hole_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace surgical_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::surgical_msgs::Hole_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::surgical_msgs::Hole_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::surgical_msgs::Hole_<ContainerAllocator> > {
  static const char* value() 
  {
    return "64cb44aecb568b09a90194264446d6fe";
  }

  static const char* value(const  ::surgical_msgs::Hole_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x64cb44aecb568b09ULL;
  static const uint64_t static_value2 = 0xa90194264446d6feULL;
};

template<class ContainerAllocator>
struct DataType< ::surgical_msgs::Hole_<ContainerAllocator> > {
  static const char* value() 
  {
    return "surgical_msgs/Hole";
  }

  static const char* value(const  ::surgical_msgs::Hole_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::surgical_msgs::Hole_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Defines the various attributes of a HOLE\n\
# ----------------------------------------\n\
#\n\
# 1. PT : the 3D location of the HOLE\n\
geometry_msgs/Point pt\n\
\n\
# 2. X_IDX : the x-index of the location of the point in the point-cloud\n\
int32 x_idx\n\
\n\
# 3. Y_IDX : the y-index of the location of the point in the point-cloud\n\
int32 y_idx\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::surgical_msgs::Hole_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::surgical_msgs::Hole_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::surgical_msgs::Hole_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pt);
    stream.next(m.x_idx);
    stream.next(m.y_idx);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Hole_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::surgical_msgs::Hole_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::surgical_msgs::Hole_<ContainerAllocator> & v) 
  {
    s << indent << "pt: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pt);
    s << indent << "x_idx: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_idx);
    s << indent << "y_idx: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_idx);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SURGICAL_MSGS_MESSAGE_HOLE_H

