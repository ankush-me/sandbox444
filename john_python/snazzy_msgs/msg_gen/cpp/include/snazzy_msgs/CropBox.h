/* Auto-generated by genmsg_cpp for file /home/joschu/Dropbox/myros/snazzy_msgs/msg/CropBox.msg */
#ifndef SNAZZY_MSGS_MESSAGE_CROPBOX_H
#define SNAZZY_MSGS_MESSAGE_CROPBOX_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace snazzy_msgs
{
template <class ContainerAllocator>
struct CropBox_ {
  typedef CropBox_<ContainerAllocator> Type;

  CropBox_()
  : mins()
  , maxes()
  {
  }

  CropBox_(const ContainerAllocator& _alloc)
  : mins(_alloc)
  , maxes(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _mins_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  mins;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _maxes_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  maxes;


  typedef boost::shared_ptr< ::snazzy_msgs::CropBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snazzy_msgs::CropBox_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CropBox
typedef  ::snazzy_msgs::CropBox_<std::allocator<void> > CropBox;

typedef boost::shared_ptr< ::snazzy_msgs::CropBox> CropBoxPtr;
typedef boost::shared_ptr< ::snazzy_msgs::CropBox const> CropBoxConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::snazzy_msgs::CropBox_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::snazzy_msgs::CropBox_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace snazzy_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::snazzy_msgs::CropBox_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::snazzy_msgs::CropBox_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::snazzy_msgs::CropBox_<ContainerAllocator> > {
  static const char* value() 
  {
    return "020b69f3a9bb46f8c0f0660ed67bdc6a";
  }

  static const char* value(const  ::snazzy_msgs::CropBox_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x020b69f3a9bb46f8ULL;
  static const uint64_t static_value2 = 0xc0f0660ed67bdc6aULL;
};

template<class ContainerAllocator>
struct DataType< ::snazzy_msgs::CropBox_<ContainerAllocator> > {
  static const char* value() 
  {
    return "snazzy_msgs/CropBox";
  }

  static const char* value(const  ::snazzy_msgs::CropBox_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::snazzy_msgs::CropBox_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] mins\n\
float32[] maxes\n\
\n\
";
  }

  static const char* value(const  ::snazzy_msgs::CropBox_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::snazzy_msgs::CropBox_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mins);
    stream.next(m.maxes);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CropBox_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::snazzy_msgs::CropBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::snazzy_msgs::CropBox_<ContainerAllocator> & v) 
  {
    s << indent << "mins[]" << std::endl;
    for (size_t i = 0; i < v.mins.size(); ++i)
    {
      s << indent << "  mins[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mins[i]);
    }
    s << indent << "maxes[]" << std::endl;
    for (size_t i = 0; i < v.maxes.size(); ++i)
    {
      s << indent << "  maxes[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.maxes[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SNAZZY_MSGS_MESSAGE_CROPBOX_H

